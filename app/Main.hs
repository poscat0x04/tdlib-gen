module Main where

import Codegen
import Data.Text (Text)
import qualified Data.Text.IO as T
import Data.Text.Prettyprint.Doc
import Data.Text.Prettyprint.Doc.Internal
import Language.TL.Parser
import Processing
import Text.Megaparsec

moduleHeader :: Text -> Doc ann
moduleHeader mname =
  let m = unsafeTextWithoutNewlines mname
   in vsep
        [ "{-# LANGUAGE DeriveGeneric #-}",
          "{-# LANGUAGE DeriveAnyClass #-}",
          "{-# LANGUAGE DerivingStrategies #-}",
          "{-# LANGUAGE DuplicateRecordFields #-}",
          "{-# LANGUAGE TemplateHaskell #-}",
          "",
          "-- | TD API data types generated by tdlib-gen",
          "module" <+> m <+> "where",
          "",
          "import GHC.Generics",
          "import Language.Haskell.Codegen.TH",
          "import Data.ByteString.Base64.Type",
          "import qualified Data.Text as T",
          "import Language.TL.I64",
          "",
          "type I53 = Int",
          "type I32 = Int",
          "type T = T.Text"
        ]

funHeader :: Text -> Doc ann
funHeader mod =
  let m = unsafeTextWithoutNewlines mod
   in vsep
        [ "{-# LANGUAGE TypeOperators #-}",
          "-- | TD API functions (methods) generated by tdlib-gen",
          "module" <+> m <+> "where",
          "",
          "import TDLib.Effect",
          "import Polysemy",
          ""
        ]

sep' :: Doc ann
sep' = "-- * Function Arguments"

main :: IO ()
main = do
  putStrLn "tl file path:"
  fp <- getLine
  f <- T.readFile fp
  let mprog = runParser program "td_api.tl" f
  case mprog of
    Left _ -> error "parse failed"
    Right prog -> do
      let (datas, functions) = convProgram prog
      let adts = fmap (convADT defTyMap) datas
      let funDefs = fmap (convFun defTyMap) functions
      putStrLn "module name for generated data declerations:"
      modName1 <- T.getLine
      putStrLn "module name for generated function definitions:"
      modName2 <- T.getLine
      let adts' = fmap paramADT funDefs
      let file1 = moduleHeader modName1 <> "\n\n" <> vsep (fmap pretty adts) <> "\n\n" <> sep' <> "\n\n" <> vsep (fmap pretty adts') <> "\n" <> "dataDec"
      let file2 = funHeader modName2 <> "\n\n" <> vsep (fmap pretty funDefs)
      writeFile "Data.hs" (show file1)
      writeFile "Fun.hs" (show file2)
